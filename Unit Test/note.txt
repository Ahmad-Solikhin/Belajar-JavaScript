==============================================
JEST
==============================================

Merupakan library untuk unit test di JS yang sangat populer saat ini
Jest ini dibuat oleh facebook, jest terintegrasi dengan sangat baik dengan nodejs, react, vue, dll
Jest ini hanya digunakan untuk melakukan unit test saja, jadi package nya hanya akan disimpan dalam mode dev saja

NPX
==============================================
NPX ini adalah (Node Package Runner), ini digunakan spesial untuk menjalankan perintah yang bisa secara otomatis mendeteksi file yang terdapat di dalam node_modules/.bin/
NPX ini juga sudah otomatis terinstall, nanti jika sebelumnya untuk menjalankan jest menggunakan ./.bin/node_modules/jest bisa dipermudah dengan npx jest


Ketika sudah menambahkan jest bisa langsung menggunakan function test secara global, dan ini tidak perlu di import2x lagi
Untuk penamaan file unit test jest harus menggunakan sufix "*.test.js"

Babel
==============================================
Saat menjalankan Jest pertama kali pasti akan error, karena Jest itu blm support untuk module
Hal ini bisa diatasi dengan cara menambahkan konfigurasi dari babel

Babel ini bisa digunakan untuk membantu dalam penggunaan Jest
Jadi nanti babel ini akan melakukan transformasi kode milik kita yang menggunakan modul menjadi commonjs
Babel ini adalah JS compiler, karena JS ini memiliki banyak versi yang belum tentu compatible dengan pendahulunya
Sebagai contoh jika membuat kode program dengan fitur Js terbaru seperti module nantinya dapat dicompile menjadi JS yantg compatible dengan JS lama

Jest Configuration
==============================================
Jest mendukung 2 cara untuk menyimpan data konfigurasi
Yang pertama adalah menambahklan key pada object jest di dalam package.json
Cara kedua adalah menyimpan dalam file jest.config.js/ts/mjs atau dapat membuat filenya secara otomatis menggunakan jest --init
Jika menggunakan file konfigurasi yang berbeda bisa dipindahkan semua konfigurasi jest nya ke dalam file baru nya dan jangan ada yang di package.json
Konfigurasi apa saja yang bisa diuganakan dalam Jest bisa dicari pada konfigurasinya ges

Matchers
==============================================
Untuk menyamakan hasil dan ekspetasi yang kita inginkan, hal ini disebut sebagai matchers
Ada banyak sekali function untuk melakukan test di Matcher, bisa diliat di dokumentasinya kalo mau liat secara lengkap

Jenis-jenis matcher adalah sebagai berikut :
- equals: digunakan untuk menyamakan
    - toBe: digunakan untuk value yang bukan object seperti string, number, dsb
    - toEqual: digunakan untuk membandingkan object, jadi nanti akan dibandingkan semua atribute yang ada di dalam objectnya
- truthiness: digunakan untuk membedakan antara undefined, null, dan false
    - toBeNull: memastikan valuenya null
    - toBeUndefined: memastikan value undefined
    - toBeDefined: kebalikan dari toBeUndefined
    - toBeTruthy: memastikan value berniali apapun, asal if menganggap true
    - toBeFalsy: memastikan value berniali apapun, asal if menganggap false
- numbers: digunakan untuk value berupa number, ini juga bisa menggunakan equals, namun ada tambahan
    - toBeGreaterThan: lebih besar
    - toBeGreaterThanOrEqual: lebih besar atau sama
    - toBeLessThan: lebih kecil
    - toBeLessThanOrEqual: lebih kecil atau saama
- strings: digunakan untuk membandingkan string
    - toMatch: ini membandingkan menggunakan regex
- arrays: digunakan untuk mengecek value yang berjenis array, ini bisa menggunakan toEqual juga
    - toContain: digunakan untuk memastikan value array memiliki item yang diberikan menggunakan toBe, ini ngecek yang isinya bukan object
    - toContainEqual: digunakan untuk memastikan value array memiliki item yang diberikan menggunakan toEqual, ini ngecek yang isinya object
- exceptions: ini mencocokan error yang terjadi
    - toThrow: memastikan terjadi exception apapun
    - toThrow(e): memastikan terjaid exception sesuai jenis yang ada di parameter
    - toThros(m): memastikan terjadi exception dengan message sesuai yang ada di parameter
- not: ini untuk melakukan negasi terhadap semua matchers nya

Test Async Code
==============================================
Jest bisa melakukan pengetesan pada kode asynchronous
Namun jest perlu diberi tahu terlebih dahulu agar async nya ditunggu oleh jest

Setup Function
==============================================
Ini adalah kode yang akan dijalankan sebelum atau sesudah unit test dijalankan
Ada :
- beforeEach: ini akan dijalankan sebelum function unit test dijalankan
- afterEach: ini akan dieksekusi setelah function unit testnya dijalankan

Ada juga function untuk menjalankan sebuah setup sebelum dan setelah 1 file unit test dijalankan
Ada :
- beforeAll
- afterAll

Scoping
==============================================
Scoping atau grouping ini digunakan untuk melakukan grouping unit test yang dibuat menggunakan function describe()
Setup function yang ada dalam describenya hanya akan digunakan untuk menjalankan describe tersebut
Jika tidak ditentukan describenya maka dia akan general digunakan terus

Scoping ini bisa dilakukan secara nested

Coverage
==============================================
Untuk menjalankan coverage menggunakan Jest bisa menggunakan fitur webstorm bisa langsung pilih coverage
Namun untuk manualnya, bisa dibuat collectCoverage dari jest menjadi true di konfigurasinya

Coverage ini juga bisa diatur thresholdnya, bisa diatur dalam file konfigurasi jest nya
Attribute2xnya:
- branches: ini adalah alur program seperti if else
- functions: berapa banyak function yang digunakan
- lines: berapa baris kode yang dilewati
- statements: misal beberapa operator yang tercover oleh unit test nya

Bisa menentukan juga kode mana saja yang harus di cover, jadi misal projectnya besar dan hanya mau cover beberapa file saja bisa menggunakan collectCoverageFrom

It Function
==============================================
Di jest ada function test yang biasa digunakan, namun ini memiliki alias dengan menggunakan function it()

Skip Function
==============================================
Jika mendapatkan masalah di suatu unit test dan ingin ignore unit test tersebut bisa membuat test tersebut menggunakan skip
Jadi unit test tersebut nantinya akan di ignore

Only Function
==============================================
Jika dalam satu file sudah banyak unit test nya dan hanya ingin fokus pada 1 unit test, hal ini bisa diatasi dengan menggunakan only
Nantinya hanya unit test itu saja yang akan dieksekusi

Each Function
==============================================
Kesalahan membuat unit test biasanya karena unit test yang dibuat duplicate dan hanya memiliki perbedaan dalam parameternya saja

Concurrent Test
==============================================
Misal ingin membuat unit test yang dibuat untuk dijalnkan secara concurrent dan tidak menunggu test lainnya untuk selesai
Untuk menggunakannya bisa menambahkan concurrent setelah test atau it

Bisa juga membatasi beberapa concurrent yang bisa berjalan secara bersamaan
Hal ini bisa dilakukan dengan menambahkan di konfigurasi jest nya menggunakan attribute maxConcurrency
Defaultnya untuk valuenya adalah 5

Todo Function
==============================================
Todo function ini digunakan sebagai summary untuk menyiapkan unit test yang belum diimplementasikan

Failing Function
==============================================
Kadang dalam unit test ada skenario yang gagal juga untuk kasusnya
Misal mengirimkan data yang tidakvalid maka nanti akan diharapkan agar kodenya menjadi error
Jadi hal ini bisa menggunakan failing
Gagal disini adalah throw exception

Mock
==============================================
Misal ingin membuat unit test yang membutuhkan interaksi seperti ke db, website, dan sebagainya
Hal ini akan sulit untuk dilakukan
Untuk itu bisa digunakan mocking ini untuk mengatasi hal tersebut

Mock itu adalah object tiruan yang dibuat dengan memiliki tingkah laku seperti object aslinya
Sehingga ini akan cocok ketika ingin melakukan unit test yang berhubungan dengan sistem lainnya

Jenis Mock:
- Mock FUnction : membuat tiruan dari sebuah function
- Mock Class    : membuat tiruan dari classnya
- Mock Module   : membuat tiruan dari modules

Mock Function
==============================================
Untuk membuaat mock function bisa menggunakan jest.fn()

saat membuat mock kadang ini tahu parameter apa yang digunakan
Hal ini bisa diatasi dengan menggunakan mock properties

Mock Async Function
==============================================
Selain mock function biasa, jest juga menyediakan yang async
Hal ini nanti akan mengembalikan value berupa promise